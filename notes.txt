
CLIENT SIDE: ---------------------------------------------------

OFFERING COMPLETIONS IN THE UI:
	to show completions, offer small amount (3 or 4) just above word (these are ordered by their probs)
	by pressing tab repeatedly, user selects each word
	if user gets to end of 3 or 4 words and continues, more results are shown (cause they're already found by the search

	Word Tree:
		- maybe word trie only gets searched on space trigger
			- so, at inception of new word, when no character completions can possibly be found
				- word tree is queried to offer relevant completions

User enters application (or enters room?):

		receive STABLE char trie from DB and construct local version
		receive current room chat data, use as corpus to construct local wordtree

		KEY LISTENERS: (how we listen for and interpret keyboard input)

			DATA we maintain:
				String fragment;			// the current substring fragment from which we're completing
				Node * tracepoint;			// pointer to lowest node we've traced down in tree
				bool tabbed;				// did user tab over completions in most recent offering?
				bool offeringCompletions;	// are completions currently being offered (changes function of some keys)
				bool ranSearch;				// was a search attempted at some point throughout typing
				Node[] completions;			// set of completions found so far, if exist


			on 'any normal char':
				if offeringCompletions:
					offeringCompletions = false
					remove display of completions

				add to fragment
				if no tracepoint exists:
					trace all the way
				else:
					just trace down another char

			on '\t' or pause exceeding threshold: (they want completions)
				if not offeringCompletions:

					if no tracepoint:
						establish tracepoint (abstract this out)					

					offeringCompletions = true
					reset tabbed to false

					if fragment is empty AND last char is space: 
						search word tree for completions
						act like a search didn't happen
					else if fragment is empty AND last char is NOT space:
						(we need a fragment)
						split chat string, get fragment from last index

					
					if no completions already exist:
						completions = run search on current fragment
						record that search was run (ranSearch)
					otherwise:
						remove all which are no longer possible
						reset each one's visibility attribute

					render completions

				otherwise:
					tab means scroll to next completion option being displayed
					update visibility attr of new completion being displayed

			on 'enter':
				if offeringCompletions:
					accept and fill currently highlighted completion
					increment prob (don't search -- we have instant access)
					send server completion ('completion accepted')
					clear EVERYTHING
				otherwise:
					send chat message
					and also clear EVERYTHING I guess

			on '\b':
				clear completions[]
				clear tracepoint
				reset tabbed
				offeringCompletions = false
				ranSearch = false
				remove char from fragment if > 0

			on ' ':	// completion without alg's help
				get last word in chat string

				if alg didn't get to run (!ranSearch) : ignore and don't do anything
				otherwise:

				"user saw word but didnt want completion"
				if word was visible (as in it was loaded at some point) and user DIDNT tab:
					decrement


				"user saw word and wanted completion... but didnt" (wtf? this do no logic)
				if word was visible AND user tabbed: (but remember they still completed on their own)
					not sure what to do here (cause this situation makes no sense)


				"user didnt see word but didnt want a completion"
				if word was not ever visible (never loaded into view) AND user never tabbed over at all:
					decrement


				"user didnt see word but did want a completion"
				if was not ever visible AND user tabbed (looking for a completion):
					increment


				Now clear EVERYTHING (starting a new fragment, new completions...)


SERVER-SIDE ----------------------------------------------------------------------------------------------

Database tree serialization

STABLE CHAR Tree (gets distributed on client connection)
UNSTABLE CHAR Tree (gets updated dynamically)
NOVELTY CHAR Tree (holds new entries temporarily)

on client connection:
	dump all STABLE db tree data on client
	dump current room data on client 

	on 'completion accepted':
			match completion into UNSTABLE tree, increment terminal prob of last node

	on 'increment':
		trace word

		if no exist in UNSTABLE:
			if no exist in NOVELTY:
					insert into NOVELTY:
				else:
					update user prob
			otherwise:
				increment prob in UNSTABLE	

	on 'decrement':
		trace word
			decrement prob (or to 0)


TRIE FILTERING: -------------------------------------------------------

Tree Filter: pruning, and combining of master tree with novelty tree to yield a new master version to be distributed
	PRUNING:
		- prune all nodes with terminal probability 0 (aka they're not going to be a completion)
				(as in, actually prune if single strand branch, don't do anything if not)
				- maybe prune lowest term. probability node by recentering all probs so that one is 0

	- anything over a certain user prob threshold in NOVELTY tree gets added into master with initial terminal prob 1
			(so its integrity can grow as users continue to use it)



CLASS IDEAS: ---------------------------------------------------------


Node {
		string data
		int localDelta						// this is added locally (clientside)
		int terminalNodeProbability
		Node [] children
}


Tree {


	// ----------------------------

	TREE SERIALIZATION NEEDS WORK - make it better

	// ---------------------------


	
	int treeType --> denotes CHAR or WORD
	int treeQuality --> denotes STABLE, UNSTABLE, or NOVELTY
	Node root

	Node traceToChild(Node, String)
		trace from a given node to its child which matches the char given (involves binary search / alphabetical comparison)
		if no child found, return null;

	Object traceFullSection(String[])
		trace a section from root as far as you can down the tree

		if whole section found:
			return {node: pointer to last node, remainingSection: nothing}

		if only part of section found:
			return {node: pointer to lowest node we found, remainingSection: String[] of the rest of the section we haven't found}

	Object[] getSubtreeCompletions(Node, String[])
		search the subtree rooted at a given node for all word completions
		the string given is the current fragment (path down the tree)

		while we search down (depth first), the current "path" string is maintained and this represents the full string value of each node

		any time a terminal node is reached, construct obj from path string and node, and push to array of results
			push IN ORDER (by terminal probability) (this could be binary search)

		Return: an ordered array of objs which look like this: {completion: "full word string", node: Node}

	void addSection(Node, String[])
		add a new section to the tree, starting from a given node


	// CHAR TREE FUNCTIONALITY:

		void increment(String)
			traceFullString()
			if full string found (no remainingChars):
				increment that node probability & local delta
				if delta exceeds threshold, ping server
			otherwise:
				add section using remainingChars, starting from the node traceFullString() gave us 

		void decrement(String)
			traceFullString()
			if full string found:
				decrement node probability & local delta (but don't let it be negative)
				if delta exceeds threshold, ping server


	// WORD TREE FUNCTIONALITY:

			void train(String[])
				look at every ngram
					traceFullPhrase() on ngram
					if whole thing found, increment last node prob
					otherwise:
						addsection on the last node we found, with the remaining string data 

}






AUTOCORRECT (?) --------------------------------------------------------

Ideas:
	- if no completions found (possible misspell), complete from the longest previous substring that can be completed

	- map misspell optimally onto char tree and use this to get relevant corrections










EXAMPLES OF USE -----------------------------------------------------------------------------------------

CAN we differentiate between words that are completed by the user because they didn't want a completion, 
and those that were completed by the user but they would have preferred it to be completed by us

word: "cheese"

c	// traverse to 'c' node from root
ch	// traverse from 'c' to 'h' child	(really inexpensive)
che	// traverse from 'h' to 'e' child

*pause* (exceeds threshold) --> now try to find completions (more expensive) at current point in trie

chee
chees

*pause* again --> this overwrites previous set of completions (this is what we look at if they end up completing themselves)

cheese
**space** --> this triggers word ending

search down as they type, storing pointer to most recent node (tracepoint)
	but only giving completions at pause


-------------------------------------------
Example with backspacing and then completing:

a
au
aut
auto
autoc

auto (Backspace) trash all the data here
\t		trigger search (this is okay because in the search func I'll realize there's no tracepoint, and trace to 'auto')

-------------------------------------------
Example with backspacing and retyping:
word: "autocomplete"

a
au
aut
auto
autoc
autoco (at this point i've traced down to 'autoco')

autoc	(NOW, a backspace) at this moment: metadata (about tabs), set of completions, and tracepoint are all thrown out the window (if they exist thus far)

auto (another backspace)

autom (now they start typing again) I realize we don't have a tracepoint, so I trace to 'autom' RIGHT NOW (I know to trace to 'autom' by getting last fragment of current chat string)

automa			continue tracing as normal
\t or pause		trigger search for completions


-------------------------------------------


// // --------- CHAT ---------------


need to use express-socket.io-session

CHAT SCHEME::::

TABLE users
	int uid
	string username

TABLE massages
	int uid
	int user
	int date
	int room
	string content

TABLE dates
	int uid
	datetime time

TABLE rooms
	int uid
	string name


-------------------

maximum # rooms available
quotas on rooms created by single user (store in session variable)

Types of Requests to limit:
	- send message into chat (socket)
	- send new modification (socket)
	- create new room (post) (but since there's a limit this doesn't really matter)

session stores moving average of message_rate and mod_rate and checks against quota table for violations